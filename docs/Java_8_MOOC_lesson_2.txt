Java 8 MOOC Lesson 2

Lesson 2.1: Introduction to Functional Programing Concepts

  Imperative Programming vs Functional Programing
   - In Functional Programming name and values are based on structured functions calls
   - Function which call other functions in turn (composition)
      E.g. <function1>(<function2>(<function3>...)...)
   - Each function receives value from the previous function as input and passes results back to the calling function
   - Names are only used as formal parameters (once value is assigned to a name it cannot be changed anymore)
   - There is no concept of command as in imperative programming
   - In imperative code the same name can be associated with different values
     In Functional code name is only associated with one value!
   - In imperative coding the order of execution of commands forms a contract and if order is changed behavior of the application may change
     In Functional programming the order of execution doesn't impact results
   - Functional programming allows functions to be treated as a functions
   - Ability to pass behavior as a parameter and therefore we can take more functional approach because we can use lambda expression
     to tell method how we want to do something by using that lambda expression to represent the implementation
   - In functional programming repetition is done through recursion

Lesson 2.2: Elements of a Stream

  Stream Overview
    - Think of Stream as of pipeline
    - No explicit loop used
    - Simplifies description of aggregate computations
    - Gives us fusing, laziness and parallelism
    - Pipeline consists of three things
      * source of Stream
      * zero or more intermediate operations on source of Stream (result is another stream)
      * terminal operation - takes a stream and generates explicit result or a side effect

  Stream terminal operations
    - Pipeline is evaluated only when the terminal operation is called
    - All operations in Pipeline can be executed in parallel or sequentially
    - Stream characteristics help identify optimizations

Lesson 2.3: Streams of objects and primitive types

    In order to improve performance in Java introduced primitive types (byte, short, int, long, double, float, char
     - if we want to use these primitive types with collections we need to convert them to objects (Byte, Short, Integer...)
       Stream itself is stream of objects so most of the operations are producing Streams of objects, and auto-boxing/unboxing is used
       to convert these into it's primitive types and vice versa. To avoid such scenarios there are IntStream, DoubleStream and LongStream
       as well as mapToInt(), mapToDouble() and mapToLong() methods. With these methods we avoid auto-boxing and unboxing

Lesson 2.4: Stream sources in JDK 8

    There are 95 methods in 23 classes that return a Stream
      - Many of them, though are intermediate operations in the Stream interface
      - 71 methods in 15 classes can be used as practical Stream sources

    Collection Interfaces
      - stream() - provides a sequential stream of elements in the collection
      - parallelStream()
          - Provides a parallel stream of elements in the collection
          - Uses the fork-join framework for implementation

    Files Class Stream methods
      - find(Path, BiPredicate, FileVisitOption) - a stream of File references that match given BiPredicate
      - list(Path) - A stream of entries from a given directory
      - lines(Path) - A stream of Strings that are the lines read from the given file
      - walk(Path, FileVisitOption) - A stream of file references walking from a given Path

    Random Numbers
     - Generating infinite Streams
     - Three random related classes (for Random Number generation)
        * Random
        * ThreadLocalRandom
        * SplittableRandom
     - Methods to produce finite and infinite streams of random numbers
        * ints()
        * doubles()
        * longs()
        We can use seeds to initialize Stream of Random

    Miscellaneous Classes and methods
      - JarFile/ZipFile: stream() - returns a File Stream of the contents of the compressed archive
      - BufferedReader: lines() - Return the stream of strings that are the lines read from the input
      - Pattern: splitAsStream() - Returns stream of strings of matches of a pattern
      - CharSequence:
          - chars() - Char values as ints for the sequence (primitive stream)
          - codePoints() - code points values for the sequence
      - BitSet: stream() - indices of bits that are set

    Only collections can create parallel stream directly

Lesson 2.5: Stream interface: Intermediate operations

    Most operations on Streams take a parameter that describes it's behavior
      - Parameters are functional interfaces
      - Method tells what we want to do and lambda tells method how to do that
      - Must be non interfering - does not modify the stream
      - Typically stateless

    map() and flatMap() - map values in a stream
      - map() takes single element from input stream and produce single element in output stream (1 to 1 mapping)
      - flatMap() each element of input stream will create one stream as an output
        and than all the result streams will be concatenated together into one output stream

    Restrict size of the stream
      - skip(n) - returns stream without first n elements of the input stream
      - limit(n) - returns a stream that contains the first n elements of the input stream

    Sorting and Unsorting
      - sorted(Comparator c) - returns a stream that is sorted with the order determined by Comparator
      - sorted() - sorts by natural order

    Unordered
      - Inherited from the base streams
      - Returns Stream that is unordered
      - can improve performance of distinct() and groupBy()

    Stream interface represents aggregate operations on a elements from a stream

Lesson 2.6: Stream interface: Terminal operations

  Terminates the pipeline of operations on the Stream

  Only at this point, when it comes to terminal operations, we actually do some real processing
    This allows optimization of the pipeline
     - Lazy Loading
     - Merged/fused operations
     - Elimination of the redundant information
     - Parallel execution

  Result of the terminal operation is ether explicit result or side effect

  Matching elements:
    - findFirst() - the first element that matches
    - findAny() - the same as findFirst() but for parallel Stream
    - allMatch(Predicate p) - whether all elements of the stream match using the Predicate
    - anyMatch(Predicate p) - whether any of the elements of the stream match using the Predicate
    - noneMatch(Predicate p) - whether no elements match using the Predicate

  Collecting results:
    - collect(Collector c) - performs a mutable reduction on the stream (to List or Map or Set...)
    - toArray() - returns the array containing the elements of the

  Numerical Results for Object Streams
    - count() - returns number of elements of the stream
    - max(Comparator c) - returns the max value element of the stream using the Comparator
    - min(Comparator c) - returns the min value element of the stream using the Comparator

    Numerical Results for primitive type streams
      - average() - returns arithmetic mean of the stream
      - sum() - returns the sum of the stream elements

    Iteration
      - forEach(Consumer c) - performs an action for each element of the stream
      - forEachOrdered(Consumer c) - the same as previous but takes care that order of the elements
      is respected when used for parallel stream
    !!! Use with caution because it encourages imperative (non functional) programming style

    Folding a Stream - creating single result from multiple elements
      - reduce(BinaryOperator accumulator) - performs reduction on the Stream using BinaryOperator

Lesson 2.7: The Optional Class
